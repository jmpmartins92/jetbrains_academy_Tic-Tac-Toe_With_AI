type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/Grid.java
  visible: false
  text: |-
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class Grid {

        private final CellState[][] grid;

        private Grid() {
            grid = new CellState[3][3];
        }

        public static Grid fromLine(String line) {
            Grid grid = new Grid();

            if (line.length() != 9) {
                throw new WrongAnswer("Wrong input length. Expected 9.\nFound " + line.length());
            }

            for (int i = 0; i < line.length(); i++) {
                grid.grid[i / 3][i % 3] = CellState.get(line.charAt(i));
            }

            return grid;
        }

        public static Grid fromOutput(String stringField) {
            return fromOutput(stringField, 1);
        }

        public static Grid fromOutput(String stringField, int fieldNumber) {

            Grid grid = new Grid();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() < 3 * fieldNumber) {
                throw new WrongAnswer("Expected not less than " + fieldNumber + " grids in the output!\n" +
                    "Make sure you print the game grids in the correct format!");
            }

            fieldLines = fieldLines.subList(fieldNumber * 3 - 3, fieldNumber * 3);

            for (int i = 0; i < fieldLines.size(); i++) {
                String line = fieldLines.get(i);
                if (line.length() != 9) {
                    throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                }
                for (int j = 0; j < 3; j++) {
                    grid.grid[i][j] = CellState.get(line.charAt(j * 2 + 2));
                }
            }

            return grid;
        }

        public static List<Grid> allGridsFromOutput(String stringField) {

            List<Grid> gridList = new ArrayList<>();

            List<String> fieldLines = Arrays.stream(stringField.split("\n"))
                .map(String::strip)
                .filter(line -> line.startsWith("|") && line.endsWith("|"))
                .collect(Collectors.toList());

            if (fieldLines.size() % 3 != 0) {
                throw new WrongAnswer("Wrong grid output format! Each grid should contain 3 lines that starts and ends with '|' symbol!");
            }

            for (int i = 0; i < fieldLines.size() / 3; i++) {
                List<String> gridLines = fieldLines.subList(i * 3, i * 3 + 3);

                Grid grid = new Grid();

                for (int j = 0; j < gridLines.size(); j++) {
                    String line = gridLines.get(j);
                    if (line.length() != 9) {
                        throw new WrongAnswer("Can't parse the game field. The following line has wrong length:\n" + line);
                    }
                    for (int k = 0; k < 3; k++) {
                        grid.grid[j][k] = CellState.get(line.charAt(k * 2 + 2));
                    }
                }

                gridList.add(grid);
            }

            return gridList;
        }

        public static Position getMove(Grid from, Grid to) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (from.grid[i][j] != to.grid[i][j]) {
                        return new Position(i, j);
                    }
                }
            }
            throw new WrongAnswer("After making a move the grid was the same!");
        }

        public boolean isWin(CellState player) {
            for (int i = 0; i < 3; i++) {
                if (grid[i][0] == grid[i][1] && grid[i][1] == grid[i][2] && grid[i][2] == player) {
                    return true;
                }
            }

            for (int i = 0; i < 3; i++) {
                if (grid[0][i] == grid[1][i] && grid[1][i] == grid[2][i] && grid[2][i] == player) {
                    return true;
                }
            }

            return grid[0][0] == grid[1][1] && grid[1][1] == grid[2][2] && grid[2][2] == player
                || grid[2][0] == grid[1][1] && grid[1][1] == grid[0][2] && grid[0][2] == player;
        }

        public boolean hasEmptyCells() {
            return Arrays.stream(grid)
                .flatMap(Stream::of)
                .anyMatch(cell -> cell == CellState.EMPTY);
        }

        public int getNumOfEmptyCells() {
            return (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.EMPTY).count();
        }

        public GameState getGameState() {
            if (isWin(CellState.X)) return GameState.X_WIN;
            if (isWin(CellState.O)) return GameState.O_WIN;
            if (hasEmptyCells()) return GameState.NOT_FINISHED;
            else return GameState.DRAW;
        }

        public CellState[][] getGrid() {
            return grid;
        }

        public void setCell(int x, int y, CellState cellState) {
            grid[x][y] = cellState;
        }

        public boolean isCorrectNextGrid(Grid grid) {
            return getNumOfEmptyCells() - grid.getNumOfEmptyCells() == 1;
        }

        public boolean isValidGrid() {

            int numOfX = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.X).count();
            int numOfO = (int) Arrays.stream(grid)
                .flatMap(Stream::of)
                .filter(cell -> cell == CellState.O).count();

            return Math.abs(numOfO - numOfX) <= 1;
        }

        public static void checkGridSequence(List<Grid> grids) {
            if (grids.size() <= 1) {
                return;
            }

            for (int i = 1; i < grids.size(); i++) {
                Grid prevGrid = grids.get(i - 1);
                Grid grid = grids.get(i);
                if (!grid.isValidGrid()) {
                    throw new WrongAnswer("Impossible grid was printed! The difference between Os and Xs in the grid is greater than 1:\n" + grid);
                }
                if (!prevGrid.isCorrectNextGrid(grid)) {
                    throw new WrongAnswer("After making a move on grid\n" + prevGrid + "\n it can't become\n" + grid);
                }
            }

            Grid lastGrid = grids.get(grids.size() - 1);

            if (lastGrid.getGameState() == GameState.NOT_FINISHED) {
                throw new WrongAnswer("Last grid is not terminal!\n" + lastGrid);
            }
        }

        @Override
        public String toString() {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("---------").append("\n");
            for (int i = 0; i < 3; i++) {
                stringBuilder.append("| ").append(grid[i][0]).append(" ").append(grid[i][1]).append(" ").append(grid[i][2]).append(" |\n");
            }
            stringBuilder.append("---------");
            return stringBuilder.toString();
        }

        private String toLine() {
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < 9; i++) {
                result.append(grid[i / 3][i % 3]);
            }
            return result.toString();
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Grid)) {
                return false;
            }

            Grid grid = (Grid) o;

            for (int i = 0; i < 9; i++) {
                if (grid.grid[i / 3][i % 3] != this.grid[i / 3][i % 3]) {
                    return false;
                }
            }
            return true;
        }

        public Grid copy() {
            return Grid.fromLine(toLine());
        }
    }

    enum GameState {

        X_WIN, O_WIN, DRAW, NOT_FINISHED

    }

    enum CellState {

        X("X"), O("O"), EMPTY(" ");

        String value;

        CellState(String value) {
            this.value = value;
        }

        static CellState get(char symbol) {
            switch (symbol) {
                case 'X':
                    return X;
                case 'O':
                    return O;
                case ' ':
                case '_':
                    return EMPTY;
                default:
                    throw new WrongAnswer("Bad symbol '" + symbol + "' in the game grid");
            }
        }

        static CellState getOpponent(CellState player) {
            if (player == X) {
                return O;
            } else {
                return X;
            }
        }

        @Override
        public String toString() {
            return value;
        }
    }
  learner_created: false
- name: test/Minimax.java
  visible: false
  text: |+
    import java.util.ArrayList;
    import java.util.List;

    public class Minimax {

        private static Position bestPosition;

        public static Position getMove(Grid grid, CellState player) {

            int bestScore = Integer.MIN_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        if (score > bestScore) {
                            bestScore = score;
                            bestPosition = new Position(i, j);
                        }
                    }
                }
            }

            return bestPosition;
        }

        private static int minimax(Grid grid, CellState player, boolean isMaximize, CellState startPlayer, int depth) {

            switch (grid.getGameState()) {
                case X_WIN:
                    return startPlayer == CellState.X ? 10 - depth : depth - 10;
                case O_WIN:
                    return startPlayer == CellState.O ? 10 - depth : depth - 10;
                case DRAW:
                    return 0;
            }

            int bestScore = isMaximize ? Integer.MIN_VALUE : Integer.MAX_VALUE;

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), !isMaximize, startPlayer, depth + 1);
                        grid.setCell(i, j, CellState.EMPTY);
                        bestScore = isMaximize ? Math.max(bestScore, score) : Math.min(bestScore, score);
                    }
                }
            }

            return bestScore;
        }

        public static List<Position> getAvailablePositions(Grid grid, CellState player) {

            List<Position> positions = new ArrayList<>();

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (grid.getGrid()[i][j] == CellState.EMPTY) {
                        grid.setCell(i, j, player);
                        int score = minimax(grid, CellState.getOpponent(player), false, player, 1);
                        if (score >= 0) {
                            positions.add(new Position(i, j));
                        }
                        grid.setCell(i, j, CellState.EMPTY);
                    }
                }
            }

            return positions;
        }
    }

    class Position {

        int x;
        int y;

        public Position(int x, int y) {
            this.x = x;
            this.y = y;
        }

        @Override
        public String toString() {
            return x + " " + y;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Position position = (Position) o;
            return x == position.x &&
                y == position.y;
        }
    }



  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/InputCheck.java
  visible: true
  text: |
    package tictactoe;

    /**
     * Class responsible for analyzing the input and reporting any errors. The input will not be accepted until it passes
     * all tests.
     */
    public class InputCheck {

        String input;
        int errorCode;

        /**
         * Constructor for checking the input for errors.
         *
         * @param input String that the users provides.
         * @param errorCode int value that corresponds to a specific error, utilized for messages from ErrorList class.
         */
        public InputCheck(String input, int errorCode) {
            this.input = input;
            this.errorCode = errorCode;
        }

        /**
         * Getter for errorCode
         *
         * @return value of the errorCode as in int.
         */
        public int getErrorCode() {
            return errorCode;
        }

        /**
         * Setter for errorCode
         *
         * @param errorCode Sets the current errorCode by the provided int value.
         */
        public void setErrorCode(int errorCode) {
            this.errorCode = errorCode;
        }

        /**
         * Tests executed when the input is a boardState. It checks if the length is exactly 9, corresponding to the 9
         * different coordinates of the board. It checks if the input contains only valid chars, namely X, O and ' '.
         * If it passes both tests, sets the errorCode to 0, which corresponds to no errors. Otherwise, it will set the
         * errorCode to a specific value to provide the appropriate error message.
         * @deprecated
         * The user will no longer provide a boardState.
         *
         */
        @Deprecated
        public void initialBoardStateCheck() {
            if (input.length() != 9) {
                setErrorCode(1);
            } else if (!input.matches("^[XO ]+$")) {
                setErrorCode(2);
            } else {
                setErrorCode(0);
            }

        }

        /**
         * Tests executed when the input is a coordinate. It checks if the input contains nothing other than digits and ' '.
         * It checks if the input contains only numbers from 1 to 3, which are respectively the minimum and maximum position
         * of each axis. Checks if the provided coordinate is an empty cell or not, as the user cannot change cells that
         * were already played. If it passes all tests, sets the errorCode to 0, which corresponds to no errors. Otherwise,
         * it will set the errorCode to a specific value to provide the appropriate error message.
         *
         * @param board board game, which is required to check if the provided coordinate is an empty cell or not.
         */
        public void inputCoordinateCheck(Board board) {

            if (!input.matches("^[\\d ]+$")) {
                setErrorCode(3);
            } else if (!input.matches("^[123 ]+$")) {
                setErrorCode(4);
            } else if (board.getCoordSymbol(Character.getNumericValue(input.charAt(0)),
                    Character.getNumericValue(input.charAt(2))) != ' ') {
                setErrorCode(5);
            } else {
                setErrorCode(0);
            }

        }

        /**
         * Tests executed for the string provided as the commands start or exit the game. There must be either a single
         * command "exit", which will terminate the program, or 3 command parameters. The first must be, specifically,
         * "start", and the 2 following ones must be a combination of the different available difficulties, that will
         * represent AI players, and/or "user", if one or two users want to play.
         *
         * @param input string provided by the user that will define the game type
         * @return either a string array with a single element containing the corresponding errorCode, or the 3 necessary
         * commands to start the game.
         */
        public String[] inputInitialMenuCheck(String input) {
            String[] menuCommands = input.split(" ");
            String[] error = new String[]{"6"};
            if (menuCommands.length == 1 && menuCommands[0].equals("exit")) {
                    System.out.println("Game exiting...");
                    setErrorCode(0);
                    System.exit(0);
            } else if (menuCommands.length == 3 && menuCommands[0].equals("start")) {
                for (int command = 1; command < menuCommands.length; command++) {
                    if (!(menuCommands[command].equals("user") ||
                            menuCommands[command].equals("easy") ||
                            menuCommands[command].equals("medium"))) {
                        setErrorCode(Character.getNumericValue(error[0].charAt(0)));
                        return error;

                    } else {
                        setErrorCode(0);
                        return menuCommands;
                    }
                }
            } else {
                setErrorCode(Character.getNumericValue(error[0].charAt(0)));
                return error;
            }
            return error;
        }



    }
  learner_created: true
- name: src/tictactoe/GameState.java
  visible: true
  text: |
    package tictactoe;

    /**
     * Class that defines the current state of the game i.e. if it is still in progress, or there is already a winner, or
     * it is a draw.
     */
    public class GameState {

        String gameState;
        Board board;

        /**
         * Constructor to set the game state, given by a string, which represents the state of the game, and the
         * corresponding game board
         *
         * @param gameState String representing the state of the game.
         * @param board game Board at that gameState.
         */
        public GameState(String gameState, Board board) {
            this.gameState = gameState;
            this.board = board;
        }

        /**
         * Getter for the gameState
         *
         * @return String representing the state of the game.
         */
        public String getGameState() {
            return gameState;
        }

        /**
         * Setter for the gameState
         *
         * @param gameState String representing the state of the game.
         */
        public void setGameState(String gameState) {
            this.gameState = gameState;
        }


        /**
         * Analyzes if there is a victor during the current gameState of the board. It first checks if there are 3 equal
         * symbols in a row at the diagonals of the board, then checks the rows and finally the columns. The symbols must
         * a playable one (i.e. it can't be an empty cell). The gameState is updated accordingly to the victorious symbol,
         * in case of a victory.
         *
         * @return boolean true if the game has been won, or false if it has not.
         */
        private boolean gameWon() {
            if ((board.getCoordSymbol(1, 1) == board.getCoordSymbol(2, 2)
                    && board.getCoordSymbol(1, 1) == board.getCoordSymbol(3, 3)
                    &&  board.getCoordSymbol(2,2) != ' ') ||
                    (board.getCoordSymbol(3, 1) == board.getCoordSymbol(2, 2)
                            && board.getCoordSymbol(3, 1) == board.getCoordSymbol(1, 3)
                    && board.getCoordSymbol(2,2) != ' ')) {
                setGameState(board.getCoordSymbol(2, 2) + " wins" );
                return true;
            }

            for (int y = 3; y > 0; y--) {
                if (board.getCoordSymbol(y, 3) == board.getCoordSymbol(y, 2) &&
                        board.getCoordSymbol(y, 3) == board.getCoordSymbol(y, 1) &&
                                board.getCoordSymbol(y,3) != ' ') {
                    setGameState(board.getCoordSymbol(y, 3) + " wins" );
                    return true;
                }
            }

            for (int x = 3; x > 0; x--) {
                if (board.getCoordSymbol(3, x) == board.getCoordSymbol(2, x) &&
                        board.getCoordSymbol(3, x) == board.getCoordSymbol(1, x) &&
                                board.getCoordSymbol(3,x) != ' ') {
                    setGameState(board.getCoordSymbol(3, x) + " wins" );
                    return true;
                }
            }

            return false;
        }


        /**
         * By checking if the game board still has empty cells, informs that the game has or not been finished. It only
         * holds true if the previous method gameWon() returns false, as not all cells have to be filled in order to a
         * game to be won and, therefore, finished.
         *
         * @return boolean true if the game has not been finished, and false if otherwise.
         */
        private boolean gameNotFinishedCheck() {
            boolean condition = board.getBoardState().contains(" ");
            if (condition) {
                setGameState("Game not finished");
            }
            return condition;
        }

        /**
         * Checks if there are any empty cells and, if not, the game state is set to a draw. As the previous method
         * gameNotFinishedCheck(), the result of this method only holds true if the method gameWon() returns false.
         *
         */
        private void drawCheck() {
            boolean condition = board.getBoardState().contains(" ");
            if (!condition) {
                setGameState("Draw");
            }
        }

        /**
         * Checks the gameState by checking each possible state, by a logical order to avoid false results. That is, it is
         * only possible to check if the game has not finished after checking if there was a victor. In the same way,
         * it is only possible to check if the game resulted in a draw after checking if it has not finished.
         */
        public void checkGameState() {
            if (!gameWon()) {
                if (!gameNotFinishedCheck()) {
                    drawCheck();
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    /**
     * Class that defines a board game, with a specific boardState of the type String.
     */
    public class Board {

        String boardState;

        /**
         * Constructor to create a board, represents all the coordinates, defined by the parameter boardState.
         *
         * @param boardState String with 9 chars that can be either ' ', X or O. ' ' represents a empty cell. The position
         *                   of the coordinate is from top left to bottom right.
         */
        public Board(String boardState) {
            this.boardState = boardState;
        }

         static final String EMPTYBOARD= "         ";


        /**
         * Constructor to create an empty board, defining its boardState as a string with 9 ' ' (spaces), representing the
         * 9 existing coordinates as empty cells.
         */
        public Board() {
            this.boardState = EMPTYBOARD;
        }

        /**
         * Getter for the boardState of a game board.
         *
         * @return boardState variable as a string.
         */
        public String getBoardState() {
            return boardState;
        }

        /**
         * Setter for the boardState of a game board.
         *
         * @param boardState String representing the symbols of each coordinate of the game board.
         */
        public void setBoardState(String boardState) {
            this.boardState = boardState;
        }


        /**
         * Getter for a symbol of a specific pair of values representing a coordinate.
         *
         * @param y Int variable of the Y axis value.
         * @param x Int variable of the X axis value.
         * @return Char representing the symbol located at the given coordinate.
         */
        public char getCoordSymbol(int y, int x) {
            return getBoardState().charAt(boardStateCharIndex(y, x));
        }

        /**
         * Setter for the boardState, by updating a coordinate value. It does so by replacing the symbol of coordinate with
         * the symbol of the coordinate that represents the same position.
         *
         * @param coordinate Coordinate of the board game that is to be changed.
         */
        public void setBoardState(Coordinate coordinate) {
            int y = coordinate.yCoordinate;
            int x = coordinate.xCoordinate;
            StringBuilder updatedBoardState = new StringBuilder();
            updatedBoardState.append(boardState);
            updatedBoardState.replace(boardStateCharIndex(y, x), boardStateCharIndex(y, x) + 1, String.valueOf(coordinate.symbol));
            setBoardState(updatedBoardState.toString());
        }

        /**
         * Calculates the corresponding index of a string as a boardState, providing a pair of values that may represent a
         * coordinate.
         *
         * @param y Int variable of the Y axis value.
         * @param x Int variable of the X axis value.
         * @return index of a string, as an Int.
         */
        private int boardStateCharIndex (int y, int x) {
            return ((y - 1) * 3 + x - 1);
        }

        /**
         * prints the board on the Output Console, as a formatted grid, placing at each coordinate the corresponding symbol.
         */
        public void boardPrint() {
            System.out.print("\n---------");
            System.out.printf("\n| %s %s %s |",
                    getCoordSymbol(1, 1), getCoordSymbol(1, 2), getCoordSymbol(1, 3));
            System.out.printf("\n| %s %s %s |",
                    getCoordSymbol(2, 1), getCoordSymbol(2, 2), getCoordSymbol(2, 3));
            System.out.printf("\n| %s %s %s |",
                    getCoordSymbol(3,1), getCoordSymbol(3, 2), getCoordSymbol(3, 3));
            System.out.print("\n---------\n");
        }

        /**
         * The user is asked for a coordinate, which will then be processed and tested to check if it is within the possible
         * realm of possibilities. If the tests fail, an informative error message will be displayed, and the user will
         * again be asked for a coordinate, until a valid coordinate is provided.
         *
         * @param player will decide which symbol, X or O, will be replacing the empty cell.
         * @return a valid coordinate already treated for usage by other methods, and free of possible error
         * causing defects.
         */
        public Coordinate coordinateRequest(Player player) {
            String input;
            int errorCode;
            do {
                System.out.println("\nEnter the coordinates: ");
                Scanner scanner = new Scanner(System.in);
                input = scanner.nextLine();
                InputCheck inputCheck = new InputCheck(input, 0);
                inputCheck.inputCoordinateCheck(this);
                errorCode = inputCheck.getErrorCode();
                ErrorList errorList = new ErrorList(errorCode);
                System.out.print(errorList.errorMessage());
            } while (errorCode != 0);
            return new Coordinate(Character.getNumericValue(input.charAt(0)),
                    Character.getNumericValue(input.charAt(2)), player.getSymbol());
        }
    }
  learner_created: true
- name: src/tictactoe/Rounds.java
  visible: true
  text: |
    package tictactoe;

    /**
     * Class that keeps track of the moves and state of the game, and connects the necessary steps to go through each round.
     */
    public class Rounds {
        Boolean gameOver;
        Board board;
        AI ai;
        Menu menu;
        GameState gameState;




        /**
         * Constructor for Rounds class, which will have a different behaviour accordingly to its inputs.
         *
         * @param gameOver boolean that is set to true if the game as ended, putting and end to the program, otherwise it
         *        is set to false
         * @param board is the game board on which the rounds are taking action
         * @param ai is the difficulty level of the ai;
         * @param menu is menu that contains the parameters chosen by the user, to run the program in different modes
         * @param gameState is the situation of the current state, for example, if it is ongoing or if a player has won.
         */
        public Rounds(Boolean gameOver, Board board, AI ai, Menu menu, GameState gameState) {
            this.gameOver = gameOver;
            this.board = board;
            this.ai = ai;
            this.menu = menu;
            this.gameState = gameState;
        }

        /**
         * Constructor for Rounds class, that takes only the inital user input as a menu, by assuming a basic default case
         * for the other variables.
         *
         * @param menu
         */
        public Rounds(Menu menu) {
            this.gameOver = false;
            this.board = new Board();
            this.ai = new AI("easy", this.board);
            this.menu = menu;
            this.gameState = new GameState("Game not finished", board);
        }

        /**
         * Getter that informs if the game has ended, true if so, false if it did not end yet.
         *
         * @return boolean value true for game to be over, false if it should continue.
         */
        public Boolean getGameOver() {
            return gameOver;
        }

        /**
         * Setter for the GameOver, ending the game or if it should prooced.
         *
         * @param gameOver boolean value that sets the game as ended if true, and if it should continue if false.
         */
        public void setGameOver(Boolean gameOver) {
            this.gameOver = gameOver;
        }


        /**
         * Method that analyzes the move to the game state made after a move, and updates info accordingly, namely updating
         * the gameState and choosing the next player (user or AI).
         */
        private void gameStaging() {
            board.boardPrint();
            gameState.checkGameState();
            if (gameState.getGameState().equals("Game not finished")) {
                setGameOver(false);
            } else {
                System.out.println(gameState.getGameState());
                setGameOver(true);
            }
        }

        /**
         * Sequence of actions taken during a user turn, namely requesting coordinates to the user, testing if input is
         * valid, and updating the game state.
         */
        public void userTurn(Player player) {
            Coordinate coordinate = board.coordinateRequest(player);
            board.setBoardState(coordinate);
            gameStaging();
        }

        /**
         * Sequence of actions taken during an AI turn, namely requesting coordinates to the user, testing if input is
         * valid, and updating the game state.
         */
        public void aITurn(Player player) {
            System.out.println("\nMaking move level \"" + ai.getLevel() + "\"");
            ai.aiMove(player);
            gameStaging();
        }


        /**
         * Creates a new player that will take the role of the first player, accordingly to the menu information.
         *
         * @return a new player, which plays the X symbol, and is the first to play.
         */
        public Player setPlayer1Info() {
            return new Player(menu.getPlayer1(), 'X', board);
        }

        /**
         * Creates a new player that will take the role of the second player, accordingly to the menu information.
         *
         * @return a new player, which plays the O symbol, and is the second to play.
         */
        public Player setPlayer2Info() {
            return new Player(menu.getPlayer2(), 'O', board);
        }

        /**
         * It makes a player move, which depends of the type of player at that turn (if human or AI).
         *
         * @param player dictates if the move should be taken by the user, or a AI at the defined difficulty
         */
        public void playerMove(Player player) {
            switch (player.getPlayerType()) {
                case ("user"):
                    userTurn(player);
                    break;
                case ("easy"):
                    ai.setLevel("easy");
                    aITurn(player);
                    break;
                case ("medium"):
                    ai.setLevel("medium");
                    aITurn(player);
                    break;
            }
        }

        /**
         * method that runs the game until the game ends.
         */
        public void fullGame() {
            Player player1 = setPlayer1Info();
            Player player2 = setPlayer2Info();
            board.boardPrint();
            while (!getGameOver()) {
                playerMove(player1);
                if (!getGameOver()) {
                    playerMove(player2);
                }
            }
        }
    }
  learner_created: true
- name: src/tictactoe/AI.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Random;

    /**
     * Class AI that provides coordinates, following a specific set of rules defined by its difficulty level.
     */
    public class AI  extends Player {

        String level;
        Board board;

        /**
         * Constructor that creates an AI with a certain difficulty level.
         *
         * @param level difficulty as a String.
         * @param board on which the AI will be setting its move.
         */
        public AI(String level, Board board) {
            this.level = level;
            this.board = board;
        }

        /**
         * Default constructor that, if not provided with a specific level, it will be set as easy level.
         *
         * @param board on which the AI will be setting its move.
         */
        public AI(Board board) {
            this.level = "easy";
            this.board = board;
        }


        /**
         * Getter for the difficulty level of the selected AI.
         *
         * @return level of the AI as a string.
         */
        public String getLevel() {
            return level;
        }

        /**
         * Setter for the difficulty level of the selected AI.
         *
         * @param level string that must match the possible available difficulty levels.
         */
        public void setLevel(String level) {
            this.level = level;
        }

        /**
         * Chooses the difficulty level of the move to be taken by the AI, between an easy move or a medium move.
         */
        public void aiMove(Player player) {
            switch (this.getLevel()) {
                case "easy":
                    levelMoveEasy(player);
                    break;
                case "medium":
                    levelMoveMedium(player);
                    break;
                default:
                    System.out.println("difficulty level not recognized");
                    break;
            }
        }

        /**
         * Plays a move on the difficulty level easy. at this difficulty, the AI will just choose a random empty cell as a
         * move. It does so by retrieving the current board state, picking a random cell which is represented as a char in
         * the board state string, and check if it is empty. If it is not empty, it will keep choosing other random cells,
         * otherwise, it will replace the current char at the chosen index to O, and updates the boardState.
         *
         * @param player dictates which symbol will be replacing the empty cell.
         */
        private void levelMoveEasy(Player player) {
            Random random = new Random();
            StringBuilder auxSB = new StringBuilder();
            auxSB.append(board.getBoardState());
            boolean validMove;
            do {
                int randomIndex = random.nextInt(9);
                if (auxSB.charAt(randomIndex) == ' ') {
                    auxSB.replace(randomIndex, randomIndex + 1, Character.toString(player.getSymbol()));
                    validMove = true;
                } else {
                    validMove = false;
                }
            } while (!validMove);
            board.setBoardState(auxSB.toString());
        }

        /**
         * plays a move in at the medium AI difficulty. It will first check if there are any possible winning moves (that
         * is, two of the current player symbols in a row. If so, it plays that same move. If not, it will check if, during
         * the next opponents move, if it has any possible winning move, by simulating that it is playing as with the
         * opponent symbol. If so, it will place it's own symbol instead, countering the win. If there is no possible
         * move that would stop the opponent from winning, it will then choose a random empty cell to place its move.
         *
         * @param player
         */
        private void levelMoveMedium(Player player) {
            if (!testPossibleWin(player, true)) {
                if(!testPossibleWin(player, false)) {
                    levelMoveEasy(player);
                }
            }
        }


        /**
         * Gives back the opponents symbol, to run the tests necessary to counter move an opponent win.
         *
         * @param player is the player making the current move.
         * @return the char that represents the symbol of the opponent.
         */
        private char opponentsSymbol (Player player) {
            if (player.getSymbol() == 'X') {
                return 'O';
            } else {
                return 'X';
            }
        }

        /**
         * If a certain move will result in a win for either players, the method will evaluate if it is either a win for
         * that player, placing it's symbol in the corresponding empty cell, or a loss, which in that case, it will evaluate
         * if there could happen a win with the opposite symbol and, if so, places its own symbol instead.
         * It will return false if neither a win or a loss could happen.
         *
         * @param player is the player making the current move (player 1 or player 2)
         * @param isCurrentPlayer is true if it is evaluating a possible winning move for itself, and false if it is
         *                        evaluating possible winning moves of the opponent.
         * @return true if a move is either a win or a counter win, false if no win or loss is possible at that point.
         */
        private boolean testPossibleWin (Player player, boolean isCurrentPlayer) {
            char symbol;
            if (isCurrentPlayer) {
                symbol = player.getSymbol();
            } else {
                symbol = opponentsSymbol(player);
            }
            StringBuilder auxSB = new StringBuilder();
            auxSB.append(board.getBoardState());
            Board testingBoard = new Board(board.getBoardState());
            GameState testingGameState = new GameState("Game not finished", testingBoard);

            for (int cellNum = 0; cellNum < 9; cellNum++) {
                if (auxSB.charAt(cellNum) == ' ') {
                    auxSB.replace(cellNum, cellNum + 1, Character.toString(symbol));
                    testingBoard.setBoardState(auxSB.toString());
                    testingGameState.checkGameState();
                    if (testingGameState.getGameState().equals(symbol + " wins") && isCurrentPlayer) {
                        board.setBoardState(auxSB.toString());
                        return true;
                    } else if (testingGameState.getGameState().equals(symbol + " wins") && !isCurrentPlayer) {
                        auxSB.replace(cellNum, cellNum + 1, Character.toString(player.getSymbol()));
                        board.setBoardState(auxSB.toString());
                        return true;
                    } else {
                        testingBoard.setBoardState(board.getBoardState());
                        auxSB.replace(0, 9, testingBoard.getBoardState());

                    }
                }
            }
            return false;
        }



    }
  learner_created: true
- name: src/tictactoe/ErrorList.java
  visible: true
  text: |
    package tictactoe;

    /**
     * Class that contains an error code, which is connected to helpful error messages, depending of the test that the input
     * failed
     */
    public class ErrorList {

        int errorCode;

        /**
         * Constructor for the List of possible errors.
         *
         * @param errorCode a int value corresponding to a specific error
         */
        public ErrorList(int errorCode) {
            this.errorCode = errorCode;
        }

        /**
         * Creates an informative error message, according to the errorCode provided. If the errorCode is 0, it is means
         * that the tested input passed all tests, and should be accepted as valid.
         *
         * @return A string with information about the error.
         */
        public String errorMessage() {
            switch (errorCode) {
                case 1:
                    return "\nIncorrect input length\n";
                case 2:
                    return "\nInvalid input, should only include X, O or _ symbols\n";
                case 3:
                    return "\nYou should enter numbers!\n";
                case 4:
                    return "\nCoordinates should be from 1 to 3!\n";
                case 5:
                    return "\nThis cell is occupied! Choose another one!\n";
                case 6:
                    return "\nBad parameters!\n";
                case 0:
                    return "";
                default:
                    return "\nDid not check for errors\n";
            }
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |
    package tictactoe;

    /**
     * Class that defines a player, which may be an AI at any difficulty, or a user.
     */
    public class Player {


        String playerType;
        char symbol;
        Board board;
        AI ai;


        /**
         * Constructor for the default player, that is considered of the type user, will place the X symbol, which also
         * means it is the first to play.
         */
        public Player() {
            this.playerType = "user";
            this.symbol = 'X';
        }

        /**
         * Constructor for a player, which may be a user or an AI of the specified difficulty, may be player 1 or 2,
         * it acknowledges the current board, as the AI requires a board to decide its moves. This will only matter if
         * the constructor creates a player of the type AI.
         *
         * @param playerType may be "user" for a human player, "easy" or any string of other AI difficulty levels.
         * @param symbol may be a char X or O, and will determine the turns that will play (odd ones for X and O even ones).
         * @param board is the current board state.
         */
        public Player(String playerType, char symbol, Board board) {
            this.playerType = playerType;
            this.symbol = symbol;
            this.board = board;
            this.ai = new AI(board);
        }


        /**
         * Getter for the playerType
         *
         * @return string "user" for a human player, "easy" or any string of other AI difficulty levels.
         */
        public String getPlayerType() {
            return playerType;
        }

        /**
         * Getter for the symbol of the player
         *
         * @return char X or O, depending if it gets the symbol of the first or the second player.
         */
        public char getSymbol() {
            return symbol;
        }
    }
  learner_created: true
- name: src/tictactoe/Coordinate.java
  visible: true
  text: |
    package tictactoe;

    /**
     * Class that defines a coordinate of the board game, with a specific symbol.
     */
    public class Coordinate {

        int yCoordinate;
        int xCoordinate;
        char symbol;

        /**
         * Constructor to set X and Y coordinates, as well as its representation in the game board.
         *
         * @param yCoordinate y axis value for the coordinate.
         * @param xCoordinate x axis value for the coordinate.
         * @param symbol coordinate's representation on the game board.
         */
        public Coordinate (int yCoordinate, int xCoordinate, char symbol) {
            this.yCoordinate = yCoordinate;
            this.xCoordinate = xCoordinate;
            this.symbol = symbol;
        }

        /**
         * Getter for the symbol variable.
         *
         * @return symbol variable as a char.
         */
        public char getSymbol() {
            return symbol;
        }

        /**
         * Setter for the symbol variable.
         *
         * @param symbol Char representing the coordinate on the game board.
         */
        public void setSymbol(char symbol) {
            this.symbol = symbol;
        }

        /**
         * Getter for the X axis value of the coordinate.
         *
         * @return X axis value as an int.
         */
        public int getxCoordinate() {
            return xCoordinate;
        }


        /**
         * Setter for the X axis value of the coordinate.
         *
         * @param xCoordinate Int indicating the X axis value.
         */
        public void setxCoordinate(int xCoordinate) {
            this.xCoordinate = xCoordinate;
        }


        /**
         * Getter for the Y axis value of the coordinate.
         *
         * @return Y axis value as an int.
         */
        public int getyCoordinate() {
            return yCoordinate;
        }

        /**
         * Setter for the Y axis value of the coordinate.
         *
         * @param yCoordinate Int indicating the Y axis value.
         */
        public void setyCoordinate(int yCoordinate) {
            this.yCoordinate = yCoordinate;
        }

        /**
         * Creates an array with the Y and X values of a coordinate.
         *
         * @return coordinates represented as an array of ints, in the form (Y, X).
         */
        public int[] getCoordinate() {
            return new int[]{this.getyCoordinate(), this.getxCoordinate()};
        }

        /**
         * Setter for all coordinate variables
         *
         * @param yCoordinate Int indicating the Y axis value.
         * @param xCoordinate Int indicating the X axis value.
         * @param symbol Char representing the coordinate on the game board.
         */
        public void setCoordinate(int yCoordinate, int xCoordinate, char symbol) {
            setyCoordinate(yCoordinate);
            setxCoordinate(xCoordinate);
            setSymbol(symbol);
        }


        /**
         * Finds which symbol (X or O) should be set for a coordinate, depending on the present number of X and O characters
         * on the game board.
         * If there are more X's than O's on the board, sets the symbol to O. Otherwise, sets it to X.
         *
         * @param board the game board.
         *
         *
         * @Deprecated
         * The symbol of the coordinates provided by the user will now always be X, while the AI always plays O.
         */
        @Deprecated
        public void setCoordinateSymbol(Board board) {
            String boardState = board.getBoardState();
            int numX = 0;
            int numO = 0;
            for (int index = 0; index < boardState.length(); index++) {
                if (boardState.charAt(index) == 'X') {
                    numX++;
                }
                if (boardState.charAt(index) == 'O') {
                    numO++;
                }
            }
            if (numX <= numO) {
                setSymbol('X');
            } else {
                setSymbol('O');
            }
        }



    }
  learner_created: true
- name: src/tictactoe/InputRequests.java
  visible: true
  text: "package tictactoe;\n\nimport java.util.Scanner;\n\n\n/**\n * Class that requests\
    \ and treats the given inputs, namely boardStates and coordinates.\n */\npublic\
    \ class InputRequests {\n\n    Board board;\n    Player player;\n\n    /**\n \
    \    * Constructor for the requests made to the user.\n     *\n     * @param board\
    \ which will be used to compare cells with provided input\n     * @param player\
    \ which will be used to provide the correct symbol to replace empty cells.\n \
    \    */\n    public InputRequests(Board board, Player player) {\n        this.board\
    \ = board;\n        this.player = player;\n    }\n\n    public InputRequests()\
    \ {\n        this.board = new Board();\n        this.player = new Player();\n\
    \    }\n\n\n    /**\n     * The user is asked for a boardState, which will then\
    \ be processed and tested to check if it is within the possible\n     * realm\
    \ of possibilities. If the tests fail, an informative error message will be displayed,\
    \ and the user will\n     * again be asked for a boardState, until a valid boardState\
    \ is provided.\n     * @deprecated\n     * The gameboard initial state will not\
    \ be provided by the user anymore. Instead, the board will always be empty\n \
    \    * at the start of a round\n     *\n     * @return a valid boardState as a\
    \ string, already treated for usage by other methods, and free of possible error\n\
    \     * causing defects.\n     */\n    @Deprecated\n    private String boardStateRequest()\
    \ {\n        String input;\n        int errorCode;\n        do {\n           \
    \ System.out.println(\"Enter the cells: \");\n            input = boardStateInputTreatment();\n\
    \            InputCheck inputCheck = new InputCheck(input, 0);\n            inputCheck.initialBoardStateCheck();\n\
    \            errorCode = inputCheck.getErrorCode();\n            ErrorList errorList\
    \ = new ErrorList(errorCode);\n            System.out.print(errorList.errorMessage());\n\
    \        } while (errorCode != 0);\n        return input;\n    }\n\n    /**\n\
    \     * Scans the input boardState and treats it to be further processed and analyzed.\n\
    \     * @deprecated\n     * This method supports the previous method boardStateRequest,\
    \ which is also deprecated.\n     *\n     * @return the boardState ready for further\
    \ processing, as a String.\n     */\n    @Deprecated\n    private String boardStateInputTreatment()\
    \ {\n        Scanner scanner = new Scanner(System.in);\n        String boardState\
    \ = scanner.nextLine();\n        String stringTreated = boardState.toUpperCase();\n\
    \        stringTreated = stringTreated.replace(\"_\", \" \");\n        return\
    \ stringTreated;\n    }\n\n\n\n    public String[] inputInitialMenu() {\n    \
    \    Scanner scanner = new Scanner(System.in);\n        int errorCode = 0;\n \
    \       String[] menuCommands;\n\n        do {\n            System.out.println(\"\
    Input command: \");\n            String input = scanner.nextLine();\n        \
    \    InputCheck inputCheck = new InputCheck(input, 0);\n            menuCommands\
    \ = inputCheck.inputInitialMenuCheck(input);\n            if (menuCommands.length\
    \ == 1) {\n                errorCode = Character.getNumericValue(menuCommands[0].charAt(0));\n\
    \            } else {\n                errorCode = 0;\n            }\n       \
    \     ErrorList errorList = new ErrorList(errorCode);\n            System.out.print(errorList.errorMessage());\n\
    \        } while (errorCode != 0);\n        return menuCommands;\n    }\n    \n\
    \    \n}\n"
  learner_created: true
- name: src/tictactoe/Menu.java
  visible: true
  text: |+
    package tictactoe;

    /**
     * Class that displays a menu that allows the user to choose the players, difficulties of AI, or exit the program.
     */
    public class Menu {

        String command;
        String player1;
        String player2;

        /**
         * Constructor for the menu, which will have a command, that can be either "start" or "exit", and the role of each
         * player, which can both be any combination of "user" and difficulty level of the AI.
         *
         * @param command string that will start or close the game;
         * @param player1 properties of player 1
         * @param player2 properties of player 2;
         */
        public Menu(String command, String player1, String player2) {
            this.command = command;
            this.player1 = player1;
            this.player2 = player2;
        }

        /**
         * Constructor for the menu that takes an already tested and prepared array of strings, that will start the program
         * as pretended.
         *
         * @param parameters array of 3 strings already tested and treated. In this case, the command will always be start.
         */
        public Menu(String[] parameters) {
            this.command = parameters[0];
            this.player1 = parameters[1];
            this.player2 = parameters[2];
        }

        public Menu() {
            this.command = "start";
            this.player1 = "user";
            this.player2 = "user";

        }

        /**
         * Getter of the info related to player1, namely if it is a user or the AI, and if so, on which difficulty.
         *
         * @return a string that defines player1;
         */
        public String getPlayer1() {
            return player1;
        }

        /**
         * Setter for player 1, which changes its type accordingly to the specified one.
         *
         * @param player1 String that may be "user" or any of the AI difficulties.
         */
        public void setPlayer1(String player1) {
            this.player1 = player1;
        }


        /**
         * Getter of the info related to player2, namely if it is a user or the AI, and if so, on which difficulty.
         *
         * @return a string that defines player2;
         */
        public String getPlayer2() {
            return player2;
        }

        /**
         * Setter for player 2, which changes its type accordingly to the specified one.
         *
         * @param player2 String that may be "user" or any of the AI difficulties.
         */
        public void setPlayer2(String player2) {
            this.player2 = player2;
        }

    }


  learner_created: true
feedback_link: https://hyperskill.org/projects/81/stages/451/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/451/implement">JetBrains
    Academy</a>
  time: Sat, 03 Apr 2021 22:00:09 UTC
record: 5
